using System;
using System.Collections.Generic;
using System.IO;

namespace JournalApp
{
    public class Program
    {
        public static void Main(string[] args)
        {
            Journal journal = new Journal();
            string filePath = "journal.txt";

            // Load existing entries
            journal.LoadFromFile(filePath);

            while (true)
            {
                Console.WriteLine("Welcome to the Journal App!");
                Console.WriteLine("1. Add a new entry");
                Console.WriteLine("2. Display all entries");
                Console.WriteLine("3. Save entries to file");
                Console.WriteLine("4. Exit");
                Console.Write("Please choose an option: ");

                string choice = Console.ReadLine();
                switch (choice)
                {
                    case "1":
                        AddNewEntry(journal);
                        break;
                    case "2":
                        journal.DisplayEntries();
                        break;
                    case "3":
                        journal.SaveToFile(filePath);
                        Console.WriteLine("Entries saved successfully.");
                        break;
                    case "4":
                        Console.WriteLine("Exiting the application. Goodbye!");
                        return;
                    default:
                        Console.WriteLine("Invalid option. Please try again.");
                        break;
                }
            }
        }

        private static void AddNewEntry(Journal journal)
        {
            Console.Write("What did you learn today? ");
            string content = Console.ReadLine();
            Entry entry = new Entry("What did you learn today?", content);
            journal.AddEntry(entry);
            Console.WriteLine("Entry added successfully.");
        }
    }

    public class Journal
    {
        public List<Entry> Entries { get; private set; }

        public Journal()
        {
            Entries = new List<Entry>();
        }

        public void AddEntry(Entry entry)
        {
            Entries.Add(entry);
        }

        public void DisplayEntries()
        {
            if (Entries.Count == 0)
            {
                Console.WriteLine("No entries found.");
                return;
            }

            Console.WriteLine("Journal Entries:");
            foreach (var entry in Entries)
            {
                Console.WriteLine(entry);
            }
        }

        public void SaveToFile(string filePath)
        {
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                foreach (var entry in Entries)
                {
                    writer.WriteLine(entry);
                }
            }
        }

        public void LoadFromFile(string filePath)
        {
            if (File.Exists(filePath))
            {
                using (StreamReader reader = new StreamReader(filePath))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        // Assuming the format is "Date: Prompt - Content"
                        var parts = line.Split(" - ");
                        if (parts.Length == 2)
                        {
                            var prompt = parts[0].Split(": ")[1]; // Extract prompt
                            var content = parts[1]; // Extract content
                            var entry = new Entry(prompt, content);
                            AddEntry(entry);
                        }
                    }
                }
            }
            else
            {
                Console.WriteLine("No journal file found. Starting a new journal.");
            }
        }
    }

    public class Entry
    {
        public string Prompt { get; }
        public string Content { get; }
        public DateTime Date { get; }

        public Entry(string prompt, string content)
        {
            Prompt = prompt;
            Content = content;
            Date = DateTime.Now;
        }

        public override string ToString()
        {
            return $"{Date:yyyy-MM-dd HH:mm:ss}: {Prompt} - {Content}";
        }
    }
}
